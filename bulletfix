
float player1X;
float player1Y;
float bulletSize = 10;
float bulletSpeed = 5;
float player1Speed = 5;
float player1YSpeed = 0;
float player1Gravity = 0.5;
boolean player1IsJumping = false;
int player1Health = 100;
boolean canPlayer1Shoot = true;
int player1ShootDelay = 1000;

float player2X;
float player2Y;
float player2Speed = 5;
float player2YSpeed = 0;
float player2Gravity = 0.5;
boolean player2IsJumping = false;
int player2Health = 100;
boolean canPlayer2Shoot = true;
int player2ShootDelay = 1000;

float floorY;

boolean[] keys = new boolean[120];

ArrayList<float[]> player1Bullets = new ArrayList<float[]>();
ArrayList<float[]> player2Bullets = new ArrayList<float[]>();

boolean isPlayer1Shooting = false;
boolean isPlayer2Shooting = false;

boolean gameOver = false;

int lastPlayer1ShotTime = 0;
int lastPlayer2ShotTime = 0;

boolean gameStarted = false;
PImage[] backgrounds = new PImage[5];
int currentBackground = 0;

void setup() {
  size(800, 400);

  for (int i = 0; i < backgrounds.length; i++) {
    backgrounds[i] = loadImage("background" + i + ".jpg");
  }

  player1X = 100;
  player1Y = height / 2;
  player2X = width - 100;
  player2Y = height / 2;

  floorY = height - 50;
}

void draw() {
 if (!gameStarted) {
    displayStartScreen();
  } else {
    background(backgrounds[currentBackground]);


  fill(255, 255, 0);
  circle(50, 50, 50);
  fill(255);
  rect(0, floorY, width, height - floorY);

  fill(255);
  textSize(20);
  text("Player 1 Health: " + player1Health, 20, 30);
  fill(0, 255, 0);
  rect(10, 40, max(player1Health, 0) * 2, 30, 28);

  fill(255);
  text("Player 2 Health: " + player2Health, width - 200, 30);
  fill(0, 255, 0);
  rect(width - 200, 40, max(player2Health, 0) * 2, 30, 28);

  fill(255, 0, 0);
  rect(player1X, player1Y, 50, 100);

  fill(0, 0, 255);
  rect(player2X, player2Y, 50, 100);

  handlePlayer1Movement();
  handlePlayer2Movement();

  player1Y += player1YSpeed;
  player1YSpeed += player1Gravity;

  if (player1Y >= floorY - 100) {
    player1Y = floorY - 100;
    player1YSpeed = 0;
    player1IsJumping = false;
  }

  player2Y += player2YSpeed;
  player2YSpeed += player2Gravity;

  if (player2Y >= floorY - 100) {
    player2Y = floorY - 100;
    player2YSpeed = 0;
    player2IsJumping = false;
  }

  if (isPlayer1Shooting && canPlayer1Shoot && millis() - lastPlayer1ShotTime >= player1ShootDelay) {
    float bulletX = player1X + 50;
    float bulletY = player1Y + 80;
    float[] bullet = { bulletX, bulletY };
    player1Bullets.add(bullet);
    canPlayer1Shoot = false;
    lastPlayer1ShotTime = millis();
  }

  for (int i = player1Bullets.size() - 1; i >= 0; i--) {
    float[] bullet = player1Bullets.get(i);
    float bulletX = bullet[0];
    float bulletY = bullet[1];

    fill(255, 0, 0);
    rect(bulletX, bulletY, bulletSize, bulletSize);

    bullet[0] += bulletSpeed;

    if (bullet[0] + bulletSize >= player2X && bulletY + bulletSize >= player2Y && bulletY <= player2Y + 100) {
      if (!player2IsJumping) {  // Check if player2 is jumping
        player2Health = max(player2Health - 5, 0);
      }
      player1Bullets.remove(i);
    }
  }

  if (isPlayer2Shooting && canPlayer2Shoot && millis() - lastPlayer2ShotTime >= player2ShootDelay) {
    float bulletX = player2X - bulletSize;
    float bulletY = player2Y + 80;
    float[] bullet = { bulletX, bulletY };
    player2Bullets.add(bullet);
    canPlayer2Shoot = false;
    lastPlayer2ShotTime = millis();
  }

  for (int i = player2Bullets.size() - 1; i >= 0; i--) {
    float[] bullet = player2Bullets.get(i);
    float bulletX = bullet[0];
    float bulletY = bullet[1];

    fill(0, 0, 255);
    rect(bulletX, bulletY, bulletSize, bulletSize);

    bullet[0] -= bulletSpeed;

    if (bulletX <= player1X + 50 && bulletY + bulletSize >= player1Y && bulletY <= player1Y + 100) {
      if (!player1IsJumping) {  // Check if player1 is jumping
        player1Health = max(player1Health - 5, 0);
      }
      player2Bullets.remove(i);
    }
  }

  if (player1Health <= 0 || player2Health <= 0) {
    gameOver = true;
    fill(255);
    textSize(40);
    textAlign(CENTER, CENTER);
    if (player1Health <= 0 && player2Health <= 0) {
      text("Draw!", width / 2, height / 2);
    } else if (player1Health <= 0) {
      text("Player 2 Wins!", width / 2, height / 2);
    } else {
      text("Player 1 Wins!", width / 2, height / 2);
    }

    textSize(30);
    text("Press 'R' to restart", width / 2, height / 2 + 50);
  }
}
}
void handlePlayer1Movement() {
  if (keys['W'] && !player1IsJumping) {
    player1YSpeed = -10;
    player1IsJumping = true;  // Set the jumping flag
  } else if (keys['S']) {
    player1Y += player1Speed;
  }

  if (keys['D']) {
    player1X += player1Speed;
  }

  if (keys['A']) {
    player1X -= player1Speed;
  }
}

void handlePlayer2Movement() {
  if (keys[UP] && !player2IsJumping) {
    player2YSpeed = -10;
    player2IsJumping = true;  // Set the jumping flag
  } else if (keys[DOWN]) {
    player2Y += player2Speed;
  }

  if (keys[RIGHT]) {
    player2X += player2Speed;
  }

  if (keys[LEFT]) {
    player2X -= player2Speed;
  }
}

void keyPressed() {
  if (keyCode == ENTER) {
    gameStarted = true;
  }


  if (keyCode == 'V') {
    if (!player1IsJumping) {
      isPlayer1Shooting = true;
    }
  }
  if (keyCode == 'L') {
    if (!player2IsJumping) {
      isPlayer2Shooting = true;
    }
  }
  if (!gameStarted && keyCode == 'B') {
    switchBackground();
  }
  if (gameOver && keyCode == 'R') {
    restartGame();
    
  }
    keys[keyCode] = true;

}

void displayStartScreen() {
  background(backgrounds[currentBackground]);
  textSize(30);
  textAlign(CENTER, CENTER);
  fill(255);
  text("Press 'ENTER' to start", width / 2, height / 2);
}

void switchBackground() {
  currentBackground = (currentBackground + 1) % backgrounds.length;
}


void keyReleased() {
  keys[keyCode] = false;
  if (keyCode == 'V') {
    isPlayer1Shooting = false;
    canPlayer1Shoot = true;
  }
  if (keyCode == 'L') {
    isPlayer2Shooting = false;
    canPlayer2Shoot = true;
  }
}

void restartGame() {
  player1Health = 100;
  player2Health = 100;
  player1X = 100;
  player1Y = height / 2;
  player2X = width - 100;
  player2Y = height / 2;
  player1Bullets.clear();
  player2Bullets.clear();
  gameOver = false;
}

